/**
 * Perform the CRUD operations on an Order from the request payload
 *  
 */
var ServiceLayerContext = require('ServiceLayerContext.js');
var http = require('HttpModule.js');
http.response.setHeader("Access-Control-Allow-Credentials", true);
/**
 * Entry function for the http POST request.
 * 
 * POST /b1s/v1/script/{{partner name}}/{{script name}}}
 */
// var queryOption = ``;
// var retCaseSensitive = slContext.BusinessPartners.query(queryOption);
// var retCaseInsensitive = slContext.query("SeriesService_GetDocumentSeries", queryOption, true);
// return http.response.send(200, retCaseInsensitive.toArray())
function POST() {
    var jsonObj = http.request.getJsonObj();
    http.response.setHeader("Access-Control-Allow-Origin", jsonObj['app_url']);

    // validation
    if (!jsonObj) throw http.ScriptException(http.HttpStatus.HTTP_BAD_REQUEST, "Fail to get the content of JSON format from the request payload");
    [
        "DocDate",
        "InvoiceSeries",
        "IncomingSeries",
        "CardCode",
        "CardName",
        "BPL_IDAssignedToInvoice",
        "U_tl_whsdesc",
        "DocumentLines"
    ].forEach((value) => {
        if(!jsonObj[value]) throw http.ScriptException(http.HttpStatus.HTTP_BAD_REQUEST, `${value} is required!`);
    })

    if(
        (jsonObj['IncomingPayment'].find((i) => i.DocCurrency !== 'USD') && (jsonObj['DocRate'] || 0) <= 1) || 
        (jsonObj['DocCurrency'] !== 'USD' && (jsonObj['DocRate'] || 0) <= 1)
    ) throw http.ScriptException(http.HttpStatus.HTTP_BAD_REQUEST, `DocRate is required!`);
    
    // Initialize ServiceLayerContext instance
    var slContext = new ServiceLayerContext();
    
    const fuelSale = slContext.get("TL_RETAILSALE_LU", jsonObj['SaleDocEntry']);
    if (fuelSale.status !== 200) return http.response.send(fuelSale.status, fuelSale.body);
    const distributionRules = slContext.query("DistributionRules", "DistributionRules?$select=FactorCode,FactorDescription,InWhichDimension&$filter=Active eq 'tYES'", true).toArray();

    jsonObj['SANumber'] = fuelSale.body.DocNum;
    jsonObj['distributionRules'] = distributionRules;
    
    try {
        // CASH SALE
        if(jsonObj["DocumentLines"].length > 0) SaleTransaction(slContext, jsonObj);

        // update status Fuel Cash Sale
        slContext.update("TL_RETAILSALE_LU", { U_tl_errormsg: "", U_tl_status: "Close" }, jsonObj['SaleDocEntry']);
        
        return http.response.send(200, {SANumber:jsonObj['SANumber'], ...fuelSale.body});
    } catch (error) {
        slContext.update("TL_RETAILSALE_LU", { U_tl_errormsg: JSON.stringify(error) }, jsonObj['SaleDocEntry'])
        return http.response.send(400, error);
    }
}

/** 
 * Entry function for the http GET request.
 * 
 * GET /b1s/v1/script/{{partner name}}/{{script name}}(139)
 * 
 */
function GET() {
    http.response.send(http.HttpStatus.HTTP_NO_CONTENT, dataSrvRes.body);
}

/** 
 * Entry function for the http PATCH request.
 * PATCH /b1s/v1/script/{{partner name}}/{{script name}}(139)
 * 
 * {"Comments: "updated from script"}
 */
function PATCH() {
    http.response.send(http.HttpStatus.HTTP_NO_CONTENT, dataSrvRes.body);
}

/** 
 * Entry function for the http DELETE request.
 * DELETE /b1s/v1/script/{{partner name}}/{{script name}}(139)
 * 
 */
function DELETE() {
    http.response.send(http.HttpStatus.HTTP_NO_CONTENT, dataSrvRes.body);
}

function IncomingPayment(inv, obj, data, cashAccount, transferAccount, checkAccount, adjustAmount=0) {
    const FilterPayment = data.filter(cur => cur.DocCurrency === obj.DocCurrency);
    if (FilterPayment.length <= 0) return null;
    
    let CashSum = 0;
    let TransferSum = 0;
    let CheckSum = 0;
    

    FilterPayment.forEach(item => {
        const isCash = item.Type === 'Cash' || item.Type === 'Coupon';
        const isTransfer = item.Type === 'Bank';
        const isCheck = item.Type === 'Check';

        CashSum += isCash ? parseFloat(item.Amount) : 0;
        TransferSum += isTransfer ? parseFloat(item.Amount) : 0;
        CheckSum += isCheck ? parseFloat(item.Amount) : 0;
    });

    const isUSD = inv.DocCurrency == 'USD';
    let total = parseFloat(CashSum + TransferSum + CheckSum);

    if(obj.DocCurrency != "USD") total = total/parseFloat(obj.DocRate);
    total += adjustAmount;
    
    var PaymentInvoices = {
        DocEntry: inv.DocEntry,
        DocNum: inv.DocNum,
        InvoiceType: "it_Invoice",
        SumApplied: isUSD ? total : 0,
        AppliedFC: !isUSD ? total * (obj.DocRate) : 0,
        DiscountPercent: 0,
        DistributionRule: inv['DocumentLines'][0]['COGSCostingCode'],
        DistributionRule2: inv['DocumentLines'][0]['COGSCostingCode2'],
        DistributionRule3: inv['DocumentLines'][0]['COGSCostingCode3']
    }; 
   
    return {
        Series: obj['IncomingSeries'],
        DocType: "rCustomer",
        BPLID: obj['BPL_IDAssignedToInvoice'],
        DocDate: obj['DocDate'],
        CardCode: obj['CardCode'],
        DocCurrency: obj['DocCurrency'],
        Remarks: obj['Remarks'],
        BankChargeAmount: 0,
        BankChargeAmountInFC: 0,
        BankChargeAmountInSC: 0,
        CashAccount: cashAccount || "",
        CashSum: CashSum,
        TransferAccount: transferAccount || "",
        TransferSum: TransferSum,
        CheckAccount: checkAccount || "",
        U_tl_dim1: obj['distributionRules'].find((e) => e.FactorCode  == inv['DocumentLines'][0]['COGSCostingCode']).FactorDescription || "", // Line of bussiness
        U_tl_dim2: obj['distributionRules'].find((e) => e.FactorCode  == inv['DocumentLines'][0]['COGSCostingCode2']).FactorDescription || "", // Revenue Line
        U_tl_dim3: obj['distributionRules'].find((e) => e.FactorCode  == inv['DocumentLines'][0]['COGSCostingCode3']).FactorDescription || "", // Product Line
        CounterReference: obj['SANumber'],
        PaymentChecks: FilterPayment.filter((check) => check.Type == 'Check')
                                    .map((check) => {
                                        return {
                                            DueDate: check.DueDate || new Date(),
                                            CheckSum: check.Amount || 0,
                                            BankCode: check.Bank || "",
                                            CheckNumber: check.CheckNum,
                                        };
                                    }) || [],
        PaymentInvoices: [PaymentInvoices]
    }
}

function SaleTransaction(slContext, jsonObj){
    slContext.startTransaction();
    // Create A/R Invoice
    var invoice = {
        DocCurrency: jsonObj['DocCurrency'],
        Series: jsonObj['InvoiceSeries'],
        DocDate: jsonObj['DocDate'],
        DocDueDate: jsonObj['DocDate'],
        TaxDate: jsonObj['DocDate'],
        CardCode: jsonObj['CardCode'],
        CardName: jsonObj['CardName'],
        DiscountPercent: jsonObj['DiscountPercent'],
        BPL_IDAssignedToInvoice: jsonObj['BPL_IDAssignedToInvoice'],
        U_tl_whsdesc: jsonObj['U_tl_whsdesc'],
        NumAtCard: "Lube",
        U_tl_arbusi: "Lube",
        U_tl_invtype:"Retail",
        U_tl_sarn: jsonObj['SANumber'], //SA Number,
        U_ti_revenue:'202001',
        DocumentLines: jsonObj.DocumentLines.map((item, index) => {
            return  {
                ItemCode: item['ItemCode'],
                Quantity: item['Quantity'],
                GrossPrice: item['GrossPrice'],
                DiscountPercent: item['DiscountPercent'],
                TaxCode: item['TaxCode'],
                UoMCode: item['UoMCode'],
                UoMEntry: item['UoMEntry'],
                COGSCostingCode: item['LineOfBussiness'],
                COGSCostingCode2: '202001',
                Currency: jsonObj['DocCurrency'],
                // COGSCostingCode2: item['RevenueLine'],
                COGSCostingCode3: item['ProductLine'],
                WarehouseCode: item["WarehouseCode"],
                DocumentLinesBinAllocations: item['DocumentLinesBinAllocations'] 
                
            }
        })
    };
    
    var invoiceContext = slContext.add("Invoices", invoice);
    if (invoiceContext.status !== 201) {
        slContext.rollbackTransaction();
        throw ({
            "tab": "A/R Invoice",
            ...invoiceContext.body
        });
    }

    // Create Incoming Payment
    var inv = invoiceContext.body;
    var invoiceTotal = inv.DocTotal || 0;
    var totalC = jsonObj['IncomingPaymentCoupon'].reduce((total, payment) => total + parseFloat(payment.Amount), 0);
    var totalP = jsonObj['IncomingPayment'].reduce((totals, payment) => {
        const currency = payment.DocCurrency;
        totals[currency] = (totals[currency] || 0) + parseFloat(payment.Amount);
        return totals;
    }, {});

    var totalPayment = 0;
    var paymentSteps = [];

    if (totalC) {
        totalPayment += totalC;
        paymentSteps.push({
            DocCurrency: "USD",
            paymentKey: "IncomingPaymentCoupon",
            amount: totalC
        });
    }
    if (totalP['KHR'] && jsonObj['DocRate']) {
        totalPayment += totalP['KHR'] / (jsonObj['DocRate']);
        paymentSteps.push({
            DocCurrency: "KHR",
            paymentKey: "IncomingPayment",
            amount: totalP['KHR'] / (jsonObj['DocRate'])
        });
    }
    if (totalP['USD']) {
        totalPayment += totalP['USD'];
        paymentSteps.push({
            DocCurrency: "USD",
            paymentKey: "IncomingPayment",
            amount: totalP['USD']
        });
    }

    const isDownShortage = totalPayment < invoiceTotal;
    paymentSteps.forEach((element, index) => {
        const isLastIndex = index === paymentSteps.length - 1;
        let adjustAmount = isDownShortage ? invoiceTotal - element.amount : 0;
        if (isLastIndex && element.DocCurrency !== 'USD') {
            adjustAmount *= jsonObj['DocRate'];
        }

        const cashAcc = element.paymentKey === 'IncomingPaymentCoupon' ? jsonObj[`CouponAccount${element.DocCurrency === 'KHR' ? 'FC' : ''}`] : jsonObj[`CashAccount${element.DocCurrency === 'KHR' ? 'FC' : ''}`];
        const bankAcc = jsonObj[`TransferAccount${element.DocCurrency === 'KHR' ? 'FC' : ''}`];
        const checkAcc = jsonObj["CheckAccount"];

        var payment = IncomingPayment(inv, { ...jsonObj, DocCurrency: element.DocCurrency }, jsonObj[element.paymentKey], cashAcc, bankAcc, checkAcc, isLastIndex ? adjustAmount : 0);
        if (payment != null) {
            var incomingContext = slContext.add("IncomingPayments", payment)
            if (incomingContext.status !== 201) {
                slContext.rollbackTransaction();
                throw {
                    tab: `${element.paymentKey} ${element.DocCurrency} Payment`,
                    ...incomingContext.body
                };
            }
        }
    });
    slContext.commitTransaction();
}